
import React, { useState, useEffect } from "react";
import { Artist } from "@/entities/Artist";
import { BookingRequest } from "@/entities/BookingRequest";
import { Button } from "@/components/ui/button";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { CheckCircle, ArrowLeft, ArrowRight } from "lucide-react";
import { Link } from "react-router-dom";
import { createPageUrl } from "@/utils";
import BackButton from "../components/shared/BackButton";

import BookingStep1 from "../components/booking/BookingStep1";
import BookingStep2 from "../components/booking/BookingStep2";
import BookingConfirmation from "../components/booking/BookingConfirmation";

export default function BookingForm() {
  const [artist, setArtist] = useState(null);
  const [currentStep, setCurrentStep] = useState(1);
  const [loading, setLoading] = useState(true);
  const [submitting, setSubmitting] = useState(false);
  const [bookingData, setBookingData] = useState({
    // Event Details
    event_date: "",
    event_time: "",
    time_zone: Intl.DateTimeFormat().resolvedOptions().timeZone,
    budget: "",
    currency: "USD",
    venue_name: "",
    venue_address: "",
    city: "",
    country: "",
    performance_duration: "",
    participant_count: "",
    includes_travel: false,
    includes_accommodation: false,
    travel_details: {},
    accommodation_details: {},
    
    // Client Details
    client_company: "",
    client_first_name: "",
    client_last_name: "",
    client_email: "",
    client_phone: "",
    client_message: ""
  });

  useEffect(() => {
    loadArtist();
  }, []);

  const loadArtist = async () => {
    try {
      const urlParams = new URLSearchParams(window.location.search);
      const artistId = urlParams.get('artist_id');
      
      if (artistId) {
        const artistData = await Artist.filter({ id: artistId });
        if (artistData.length > 0) {
          setArtist(artistData[0]);
          setBookingData(prev => ({ ...prev, artist_id: artistId }));
        }
      }
    } catch (error) {
      console.error("Error loading artist:", error);
    }
    setLoading(false);
  };

  const updateBookingData = (field, value) => {
    setBookingData(prev => ({ ...prev, [field]: value }));
  };

  const handleNext = () => {
    if (currentStep < 3) {
      setCurrentStep(currentStep + 1);
    }
  };

  const handlePrevious = () => {
    if (currentStep > 1) {
      setCurrentStep(currentStep - 1);
    }
  };

  const handleSubmit = async () => {
    setSubmitting(true);
    try {
      await BookingRequest.create({
        ...bookingData,
        status: "pending"
      });
      setCurrentStep(3);
    } catch (error) {
      console.error("Error submitting booking:", error);
    }
    setSubmitting(false);
  };

  const steps = [
    { number: 1, title: "Event Details", description: "Tell us about your event" },
    { number: 2, title: "Your Information", description: "Contact details and message" },
    { number: 3, title: "Confirmation", description: "Booking submitted successfully" }
  ];

  if (loading) {
    return (
      <div className="min-h-screen bg-gradient-to-br from-slate-50 to-blue-50 flex items-center justify-center">
        <div className="animate-spin rounded-full h-32 w-32 border-b-2 border-blue-600"></div>
      </div>
    );
  }

  if (!artist) {
    return (
      <div className="min-h-screen bg-gradient-to-br from-slate-50 to-blue-50 flex items-center justify-center">
        <div className="text-center">
          <h2 className="text-2xl font-bold text-gray-600 mb-2">Artist Not Found</h2>
          <BackButton className="bg-blue-600 hover:bg-blue-700 text-white">
            Go Back
          </BackButton>
        </div>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-gradient-to-br from-slate-50 to-blue-50 py-12 px-6">
      <div className="max-w-4xl mx-auto">
        {/* Header */}
        <div className="text-center mb-12">
          <BackButton className="mb-6" />
          <h1 className="text-4xl font-bold text-gray-900 mb-4">
            Book {artist.artist_name}
          </h1>
          <p className="text-gray-600 text-lg">
            Complete the booking process to request this artist for your event
          </p>
        </div>

        {/* Progress Steps */}
        <div className="flex justify-center mb-12">
          <div className="flex items-center space-x-8">
            {steps.map((step, index) => (
              <React.Fragment key={step.number}>
                <div className="flex flex-col items-center">
                  <div className={`w-12 h-12 rounded-full flex items-center justify-center font-bold text-lg transition-all duration-300 ${
                      currentStep >= step.number
                        ? "bg-blue-600 text-white"
                        : "bg-gray-200 text-gray-500"
                    }`}>
                      {currentStep > step.number ? (
                        <CheckCircle className="w-6 h-6" />
                      ) : (
                        step.number
                      )}
                    </div>
                    <div className="text-center mt-2">
                      <div className="font-semibold text-sm">{step.title}</div>
                      <div className="text-xs text-gray-500">{step.description}</div>
                    </div>
                  </div>
                  {index < steps.length - 1 && (
                    <div className={`w-24 h-1 mx-4 transition-all duration-300 ${
                      currentStep > step.number ? "bg-blue-600" : "bg-gray-200"
                    }`}></div>
                  )}
              </React.Fragment>
            ))}
          </div>
        </div>

        {/* Step Content */}
        <Card className="bg-white/80 backdrop-blur-sm border-0 shadow-2xl">
          <CardHeader className="p-8 border-b">
            <CardTitle className="text-2xl font-bold text-center">
              {steps[currentStep - 1].title}
            </CardTitle>
          </CardHeader>
          <CardContent className="p-8">
            {currentStep === 1 && (
              <BookingStep1
                bookingData={bookingData}
                updateBookingData={updateBookingData}
                artist={artist}
              />
            )}
            {currentStep === 2 && (
              <BookingStep2
                bookingData={bookingData}
                updateBookingData={updateBookingData}
              />
            )}
            {currentStep === 3 && (
              <BookingConfirmation
                artist={artist}
                bookingData={bookingData}
              />
            )}
          </CardContent>
          
          {/* Navigation */}
          {currentStep < 3 && (
            <div className="flex justify-between items-center p-8 border-t">
              <Button
                variant="outline"
                onClick={handlePrevious}
                disabled={currentStep === 1}
                className="px-8"
              >
                <ArrowLeft className="w-4 h-4 mr-2" />
                Previous
              </Button>
              
              {currentStep === 1 && (
                <Button
                  onClick={handleNext}
                  className="bg-blue-600 hover:bg-blue-700 px-8"
                >
                  Next
                  <ArrowRight className="w-4 h-4 ml-2" />
                </Button>
              )}
              
              {currentStep === 2 && (
                <Button
                  onClick={handleSubmit}
                  disabled={submitting}
                  className="bg-green-600 hover:bg-green-700 px-8"
                >
                  {submitting ? "Submitting..." : "Submit Booking Request"}
                </Button>
              )}
            </div>
          )}
        </Card>
      </div>
    </div>
  );
}
